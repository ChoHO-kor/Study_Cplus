#include <stdio.h>

//void swap(int a, int b) {
//	int temp = a;
//	a = b;
//	b = temp;
//}
//
//int main()
//{
//	int a = 3;
//	int b = 4;
//
//	swap(a,b);
//	//변경이 적용이 안됨
//	printf("a:%d, b:%d", a, b);
//
//	return 0;
//}

//----------------------------------------------------------------------
//데이터타입* 데이터타입형 포인터 변수 선언
//int* int형 포인터 변수 선언(int형 변수의 주소를 기억 공간)
//*변수 -> 포인터 변수가지고 있는 위치(메모리주소)의 값을 찾아서 사용
//변수*변수 = 곱하기

//void swap(int* pa, int* pb) {
//	int temp = *pa;
//	*pa = *pb;
//	*pb = temp;
//}
//
////함수오버로딩(name mangling) - 이름이 같아도 받는 매개변수의 형이 다르면 다르게 인식함
//void swap(float* pc, float* pd) {
//	float temp = *pc;
//	*pc = *pd;
//	*pd = temp;
//}

//C++의 기능 템플릿 - 요청된 형태를 자동으로 생성해줌
template<typename T>
void swap(T* pa, T*pb) {
	T temp = *pa;
	*pa = *pb;
	*pb = temp;
}//사용 : swap<float>(&c, &d);

//template<typename T, typename Y>
//void swap(T* pa, T*pb) {
//	T temp = *pa;
//	*pa = *pb;
//	*pb = temp;
//} 사용 : swap<float,int>(&c, &d); or swap<int,char>(&c, &d); ...

int main()
{
	int a = 3;
	int b = 4;
	//(int*)~: ~주소의 값
	//int* pa = nullptr;//포인터 변수 선언
	//pa = &a;
	//int* pb = &b;
	//&a : a의 메모리(Ram)에서의 주소값을 알려달라(매번다름)
	//printf("a:%d\n", &a);
	//printf("pa:%d\n", *pa);
//----------------------------------------------------------------------
	//형변환 (똑같이 안맞춰주고 사용하면 데이터손실 가능성있음)
	//float c = (float)a;
//----------------------------------------------------------------------
	//pa = &a + 20; --> 주소값만 더해짐
//----------------------------------------------------------------------
	//swap(&a, &b);
	//printf("a:%d\nb:%d", a, b);
//----------------------------------------------------------------------
	/*int* pa = &b;
	printf("a * pa : %d", a* ((*pa)+1));*/
//----------------------------------------------------------------------
	//c와 d를 교환하는 함수
	float c = 3.4f;
	float d = 6.7f;
	printf("c : %f\nd : %f\n", c, d);
	//swap(&c, &d);
	swap<float>(&c, &d);
	printf("pc : %f\npd : %f\n", c,d );
//----------------------------------------------------------------------
	//int* pa;
	//int** ppa;
	//int*** ppa;
	//DX(DirectX) 용도? 포인터의포인터 넘어가면 잘못짯다 생각하자
//----------------------------------------------------------------------

//----------------------------------------------------------------------
//----------------------------------------------------------------------
//----------------------------------------------------------------------
//----------------------------------------------------------------------
//----------------------------------------------------------------------
//----------------------------------------------------------------------
	return 0;
}